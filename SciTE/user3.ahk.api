;; Library of functions that utilitize Regular Expressions for string parsing and substitution.\n\nregex_SwapTabs(rgx_replaceWith := "\\t")\n\tDescr:\tReplaces the Clipboard contents. Swaps out tab characters with the given RegEx string.\n\tReturn:\tSTRING\n\tNotes: Search Expression := "(?:\t)"\n\nregex_SwapTabs(rgx_replaceWith := "\t"){\n\trgx_findTabs := "(?:\t)"\n\treturn RegExReplace(Clipboard, rgx_findTabs, rgx_replaceWith)\n}\nregex_SwapLineBreaks(rgx_replaceWith := "\\n")\n\tDescr:\tReplaces the Clipboard contents. Swaps out line-break characters with the given RegEx string.\n\tReturn:\tSTRING\n\tNotes: Search Expression := "((?:\r\n)|(?:\r)|(?:\n))"\n\n\t\t- Matches a single token of (CR+LF or CR or LF)\n\nregex_SwapLineBreaks(rgx_replaceWith := "\n"){\n\trgx_findLineBreaks := "((?:\r\n)|(?:\r)|(?:\n))"\n\treturn RegExReplace(Clipboard, rgx_findLineBreaks, rgx_replaceWith)\n}\nregex_parseDocumentForFunctions()\n\tDescr:\tSelects All, Copies Selection, then replaces Clipboard with a list of functions if any.\n\tReturn:\tSTRING - Returns a string list (not an array) of functions. \n\tParams:\tp_CRLF := "\r\n"\n\n\t\t\tp_TAB := "\t"\n\tNotes:\tReplace text is considered raw. If actuall control characters are desired, use "`" to escape. \n\nregex_parseDocumentForFunctions(p_CRLF := "\r\n", p_TAB := "\t"){\n\tSend, ^a\n\tcopySelection()\n\trgx_parser := "(?:([\s\S\.]*?)([\r\n]{1})([A-Za-z_\-]+)(\([\s\S]*?\))(?=[\s]*{[\s\S]*}))|(?:([\s\S]+?$)(?![\r\n]{1}[A-Za-z_\-]+\([\s\S]*?\)[\s\S]*{.+}.+$))"\n\trgx_replacer := "$3$4" . p_CRLF\n\tfirst_pass := RegExReplace(Clipboard, rgx_parser, rgx_replacer)\n\trgx_parser := "\n\t\t"\n\trgx_replacer := p_CRLF . p_TAB . p_TAB\n\tsecond_pass := RegExReplace(Clipboard, rgx_parser, rgx_replacer)\n\tretVal := second_pass\n\treturn  retVal\n}\n\nregex_selection_swapLineBreaksAndTabs()\n\tDescr:\tAdds current selection to Clipboard, then modifies the clipboard's contents,\n\n\t\t\t\treplacing line-breaks with "\n" by default,\n\n\t\t\t\tand tabs with "\t" by default.\n\tReturn:\tSTRING\n\tParams: p_lineBreakSubstitution := \t"\n"\n\n\t\t\tp_tabSubstitution \t\t:=\t"\t"\n\tNotes:\tMust have something selected for this method to work. \n\nregex_selection_swapLineBreaksAndTabs(p_lineBreakSubstitution := "\n", p_tabSubstitution := "\t"){\n\tcopySelection()\n\tClipboard := regex_SwapLineBreaks()\n    Clipboard := regex_SwapTabs()\n\treturn\n}\nregex_selection_swapLineBreaksAndTabs()\n\tDescr:\tModifies the clipboard's contents,\n\n\t\t\t\treplacing line-breaks with "\n" by default,\n\n\t\t\t\tand tabs with "\t" by default.\n\tReturn:\tSTRING\n\tParams: p_lineBreakSubstitution := \t"\n"\n\n\t\t\tp_tabSubstitution \t\t:=\t"\t"\n\tNotes:\tThis method only operates on pre-existing Clipboard content.\n\nregex_clipboard_swapLineBreaksAndTabs(p_lineBreakSubstitution := "\n", p_tabSubstitution := "\t"){\n\tClipboard := regex_SwapLineBreaks()\n    Clipboard := regex_SwapTabs()\n\treturn\n}\nregex_selection_removeCommentDelimiters()\n\tDescr:\tAdds current selection to Clipboard, then modifies the clipboard's contents,\n\tReturn:\tVOID\n\tParams:\tp_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t\tp_delimiter_end := "(?:\)"\n\tNotes:\tMust have something selected for this method to work. \n\n\nregex_selection_removeCommentDelimiters(p_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t,\tp_delimiter_mid := "((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_end := "(?:\)"){\n\tcopySelection()\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_begin)\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_mid)\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_end)\n\t;: MsgBox, % Clipboard\n\treturn\n}\nregex_clipboard_removeCommentDelimiters()\n\tDescr:\tModifies the clipboard's contents,\n\tReturn:\tVOID\n\tParams:\tp_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t\tp_delimiter_end := "(?:\)"\n\tNotes:\tThis method only operates on pre-existing Clipboard content.\n\nregex_clipboard_removeCommentDelimiters(p_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t;: ,\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_mid := "(?<=\r|\n|(?:\r\n))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_end := "(?:\)"){\n\tClipboard := RegExReplace(Clipboard, p_delimiter_begin)\n\tClipboard := RegExReplace(Clipboard, p_delimiter_mid)\n\tClipboard := RegExReplace(Clipboard, p_delimiter_end)\n\treturn \n}\n\nregex_selection_sort()\n\tDescr:\tCopies selection, and then sorts the Clipboard's contents.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\t\n\nregex_selection_sort(){\n\tcopySelection()\n\tSort, Clipboard\n\treturn\n}\n\nregex_selection_sortAndPaste()\n\tDescr:\tSorts the currently selected text.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\t\n\nregex_selection_sortAndPaste(){\n\tcopySelection()\n\tSort, Clipboard\n\tpasteClipboard()\n\treturn\n}\n\nregex_clipboard_sort()\n\tDescr:\tSorts the Clipboard's content.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\tDoes not copy or paste.\n\nregex_clipboard_sort(){\n\tSort, Clipboard\n\treturn\n}\n\nregex_clipboard_sortAndPaste()\n\tDescr:\tSorts the Clipboard's content.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\tDoes not copy.\n\nregex_clipboard_sortAndPaste(){\n\tSort, Clipboard\n\tpasteClipboard()\n\treturn\n};; Library of functions that utilitize Regular Expressions for string parsing and substitution.\n\nregex_SwapTabs(rgx_replaceWith := "\\t")\n\tDescr:\tReplaces the Clipboard contents. Swaps out tab characters with the given RegEx string.\n\tReturn:\tSTRING\n\tNotes: Search Expression := "(?:\t)"\n\nregex_SwapTabs(rgx_replaceWith := "\t"){\n\trgx_findTabs := "(?:\t)"\n\treturn RegExReplace(Clipboard, rgx_findTabs, rgx_replaceWith)\n}\nregex_SwapLineBreaks(rgx_replaceWith := "\\n")\n\tDescr:\tReplaces the Clipboard contents. Swaps out line-break characters with the given RegEx string.\n\tReturn:\tSTRING\n\tNotes: Search Expression := "((?:\r\n)|(?:\r)|(?:\n))"\n\n\t\t- Matches a single token of (CR+LF or CR or LF)\n\nregex_SwapLineBreaks(rgx_replaceWith := "\n"){\n\trgx_findLineBreaks := "((?:\r\n)|(?:\r)|(?:\n))"\n\treturn RegExReplace(Clipboard, rgx_findLineBreaks, rgx_replaceWith)\n}\nregex_parseDocumentForFunctions()\n\tDescr:\tSelects All, Copies Selection, then replaces Clipboard with a list of functions if any.\n\tReturn:\tSTRING - Returns a string list (not an array) of functions. \n\tParams:\tp_CRLF := "\r\n"\n\n\t\t\tp_TAB := "\t"\n\tNotes:\tReplace text is considered raw. If actuall control characters are desired, use "`" to escape. \n\nregex_parseDocumentForFunctions(p_CRLF := "\r\n", p_TAB := "\t"){\n\tSend, ^a\n\tcopySelection()\n\trgx_parser := "(?:([\s\S\.]*?)([\r\n]{1})([A-Za-z_\-]+)(\([\s\S]*?\))(?=[\s]*{[\s\S]*}))|(?:([\s\S]+?$)(?![\r\n]{1}[A-Za-z_\-]+\([\s\S]*?\)[\s\S]*{.+}.+$))"\n\trgx_replacer := "$3$4" . p_CRLF\n\tfirst_pass := RegExReplace(Clipboard, rgx_parser, rgx_replacer)\n\trgx_parser := "\n\t\t"\n\trgx_replacer := p_CRLF . p_TAB . p_TAB\n\tsecond_pass := RegExReplace(Clipboard, rgx_parser, rgx_replacer)\n\tretVal := second_pass\n\treturn  retVal\n}\n\nregex_selection_swapLineBreaksAndTabs()\n\tDescr:\tAdds current selection to Clipboard, then modifies the clipboard's contents,\n\n\t\t\t\treplacing line-breaks with "\n" by default,\n\n\t\t\t\tand tabs with "\t" by default.\n\tReturn:\tSTRING\n\tParams: p_lineBreakSubstitution := \t"\n"\n\n\t\t\tp_tabSubstitution \t\t:=\t"\t"\n\tNotes:\tMust have something selected for this method to work. \n\nregex_selection_swapLineBreaksAndTabs(p_lineBreakSubstitution := "\n", p_tabSubstitution := "\t"){\n\tcopySelection()\n\tClipboard := regex_SwapLineBreaks()\n    Clipboard := regex_SwapTabs()\n\treturn\n}\nregex_selection_swapLineBreaksAndTabs()\n\tDescr:\tModifies the clipboard's contents,\n\n\t\t\t\treplacing line-breaks with "\n" by default,\n\n\t\t\t\tand tabs with "\t" by default.\n\tReturn:\tSTRING\n\tParams: p_lineBreakSubstitution := \t"\n"\n\n\t\t\tp_tabSubstitution \t\t:=\t"\t"\n\tNotes:\tThis method only operates on pre-existing Clipboard content.\n\nregex_clipboard_swapLineBreaksAndTabs(p_lineBreakSubstitution := "\n", p_tabSubstitution := "\t"){\n\tClipboard := regex_SwapLineBreaks()\n    Clipboard := regex_SwapTabs()\n\treturn\n}\nregex_selection_removeCommentDelimiters()\n\tDescr:\tAdds current selection to Clipboard, then modifies the clipboard's contents,\n\tReturn:\tVOID\n\tParams:\tp_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t\tp_delimiter_end := "(?:\)"\n\tNotes:\tMust have something selected for this method to work. \n\n\nregex_selection_removeCommentDelimiters(p_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t,\tp_delimiter_mid := "((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_end := "(?:\)"){\n\tcopySelection()\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_begin)\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_mid)\n\t;: MsgBox, % Clipboard\n\tClipboard := RegExReplace(Clipboard, p_delimiter_end)\n\t;: MsgBox, % Clipboard\n\treturn\n}\nregex_clipboard_removeCommentDelimiters()\n\tDescr:\tModifies the clipboard's contents,\n\tReturn:\tVOID\n\tParams:\tp_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t\tp_delimiter_end := "(?:\)"\n\tNotes:\tThis method only operates on pre-existing Clipboard content.\n\nregex_clipboard_removeCommentDelimiters(p_delimiter_begin := "(/\*\*?\s*)"\n\n\t\t;: ,\tp_delimiter_mid := "(?<=(?:\r|\n|(?:\r\n)))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_mid := "(?<=\r|\n|(?:\r\n))((;;\s)|(;:\s)|(;~\s))"\n\n\t\t,\tp_delimiter_end := "(?:\)"){\n\tClipboard := RegExReplace(Clipboard, p_delimiter_begin)\n\tClipboard := RegExReplace(Clipboard, p_delimiter_mid)\n\tClipboard := RegExReplace(Clipboard, p_delimiter_end)\n\treturn \n}\n\nregex_selection_sort()\n\tDescr:\tCopies selection, and then sorts the Clipboard's contents.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\t\n\nregex_selection_sort(){\n\tcopySelection()\n\tSort, Clipboard\n\treturn\n}\n\nregex_selection_sortAndPaste()\n\tDescr:\tSorts the currently selected text.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\t\n\nregex_selection_sortAndPaste(){\n\tcopySelection()\n\tSort, Clipboard\n\tpasteClipboard()\n\treturn\n}\n\nregex_clipboard_sort()\n\tDescr:\tSorts the Clipboard's content.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\tDoes not copy or paste.\n\nregex_clipboard_sort(){\n\tSort, Clipboard\n\treturn\n}\n\nregex_clipboard_sortAndPaste()\n\tDescr:\tSorts the Clipboard's content.\n\tReturn:\tVOID\n\tParams:\t\n\tNotes:\tDoes not copy.\n\nregex_clipboard_sortAndPaste(){\n\tSort, Clipboard\n\tpasteClipboard()\n\treturn\n}