; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; LIST OF COMMAND SYNTAX
; =====================================================================
;   command.name.number.filepattern
;   command.number.filepattern
;   command.is.filter.number.filepattern
;   command.subsystem.number.filepattern
;   command.save.before.number.filepattern
;   command.input.number.filepattern
;   command.replace.selection.number.filepattern
;   command.quiet.number.filepattern
;   command.mode.number.filepattern
;   command.shortcut.number.filepattern
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; TOOL DEFINITIONS ARE IN THE FOLLOWING FORMAT:
; =====================================================================
; =Tool Name|Command line|Hotkey (optional)|Icon (optional)
; If the text of a command starts with '*' then the Parameters dialog is displayed to prompt for parameters before executing the command. The initial '*' is not included in the command that is executed.
; The command number can be in the range of 0 to 49. Command numbers 0 to 9 are assigned Ctrl+Number shortcuts. Internally these commands use IDs starting from 1100 (IDM_TOOLS) which can be used in user.shortcuts and user.context.menu as:
; #####################################################################
; EXAMPLE
; ---------------------------------------------------------------------
; user.context.menu=Indent|1100|
; ---------------------------------------------------------------------
; If command.name is empty, then no item is added to the Tools menu. 
; This can be used for commands that are only in the context menu or user shortcuts. 
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Paths,  support the following variables:
; =====================================================================
; %FILENAME% represents the filename of the current script
; %FILEPATH% represents the path to the current script
; %FULLFILENAME% represents the path and filename of the current script
; %SCITEDIR% represents the directory where SciTE resides
; %USERDIR% represents the user SciTE directory (My Documents\AutoHotkey\SciTE)
; %PLATFORM% represents the active platform
; %LOCALAHK% is the path of SciTE4AutoHotkey's internal copy of AutoHotkey.exe
; %AUTOHOTKEY% is the path of AutoHotkey.exe
; %ICONRES% is the toolbar icon library
; Use - or -- to add separators.
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Extra commands can be added to the Tools menu. For example to 
; include the 'astyle' indenter, the properties file could 
; contain...
; ---------------------------------------------------------------------
; command.name.0.*.cc=Indent
; command.0.*.cc=astyle -taO $(FileNameExt)
; command.is.filter.0.*.cc=1
; ---------------------------------------------------------------------
; The first line defines the string that will appear in the Tools 
; menu (immediately below 'Go'). The second line is the command 
; string, similar to those of the compile, build, and go 
; commands. The optional command.is.filter property states that 
; the command modifies the current file so it may need to be 
; read in after performing the command if load.on.activate is 
; set.
; If command.save.before is set to 1, SciTE automatically saves 
; the file before execution. If it is set to 2, SciTE will not 
; save the file, otherwise SciTE asks you. On Windows, the 
; optional command.input property specifies text that will be 
; piped to the command. This may reference other properties; 
; for example, command.input.0.*.cc=$(CurrentSelection) would 
; pipe the current selection to the command processes. The 
; command.input property is only supported for subsystem 0 
; (command line programs).
; 
; The optional command.replace.selection can be used to specify 
; that the command output should replace the current selection 
; (or be inserted at the cursor location, if there is no 
; selection). This property has three available settings: 0, 
; the default, means do not replace the selection. 1 means 
; replace the selection when the command finishes. 2 means 
; replace the selection only if the command finishes with an 
; exit code of 0. If the user cancels the command via "Tools / 
; Stop Executing", the selection will not be replaced even in 
; mode 1. Note, commands run asynchronously, so you are not 
; prevented from modifying the document or even switching 
; buffers while a command is running. However, please bear in 
; mind that command.replace.selection will send the output to 
; whatever window is active when the command completes.
; A final command property is command.quiet. A value of 1 
; indicates that the command I/O should not be echoed to the 
; output pane. This may be useful in combination with 
; command.input and command.replace.selection.
; 
; The command.mode property is a comma-separated list of flags / 
; settings. Each mode setting can have an argument, separated 
; from the setting name by a colon. For most of these, the 
; argument portion is optional; if the setting name appears 
; without an argument, this works the same as "setting:yes". If 
; a setting is included in the command.mode but also appears as 
; a separate command property, the mode property will be 
; overridden. Similarly, if a single setting appears more than 
; once with different arguments, the last valid argument takes 
; priority. 
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; The supported command.mode settings are:
; =====================================================================
; filter - accepts keyword arguments yes and no
; quiet - accepts keyword arguments yes and no
; replaceselection - accepts yes, no, and auto
; savebefore - accepts yes, no, and prompt
; subsystem - console, windows, shellexec, lua, director, 
; winhelp, htmlhelp, immediate
; groupundo - yes or no
; =====================================================================
; Currently, all of these except groupundo are based on 
; individual properties with similar names, and so are not 
; described separately here. The groupundo setting works with 
; subsystem 3 (lua / director), and indicates that SciTE should 
; treat any changes made by the command as a single undo 
; action. A command that uses the groupundo setting should not 
; change which buffer is active in the editor.
; The command.shortcut property allows you to specify a keyboard 
; shortcut for the command. By default, commands 0 to 9 have 
; keyboard shortcuts Ctrl+0 to Ctrl+9 respectively, but this 
; can be overridden. For commands numbered higher than 9, there 
; is no default keyboard shortcut. The notation used to specify 
; keyboard shortcuts is the same as for the user.shortcuts 
; property, described elsewhere in this document.